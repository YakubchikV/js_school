/*
Привет!
Прежде чем начать делать домашку, прочти пожалуйста требования полностью, не приступай, пока не прочтешь!!!

Настроим репозиторий:
 - создай репозиторий у себя на гитхабе, помни, нужно следовать git-flow, не делай репник приватным, я не люблю когда мне присылают инвайты на приватные репники.
 - ветка master должна содержать initial commit в который ты поместишь код с урока 5, на всякий случай вот ссылка - 
    https://github.com/YakubchikV/js_school/tree/master/lesson_5_DOM
 - ветка develop должна содержать все коммиты - по одному на каждое задание. 
    Откуда взять задания? - Они описаны ниже, и отдельно пронумерованы(их у тебя будет 5). 
    По одному коммиту? - должен быть отдельный commit на одно задание,
    один функционал - один коммит, одна микротаска - один коммит, 5 заданий - 5 коммитов, initial commit мы не считаем.
    Извини, я знаю, что ты понимаешь с первого раза, но если у тебя коммитов больше или меньше чем заданий, то 
    сразу можешь считать, что домашнее задание не сделано и получишь 1.
    Так же 5 коммитов еще не гарантируют тебе, то что задача правильная, это лишь малая часть.
- в конце-концов - у тебя будет 6 коммитов = 1 initial + 5 на каждую задачу
- что с этим всем делать? оставлять в develop? - ну нет. 
- создаешь релизную ветку с develop
- затем делаешь tag с этой ветки
- и в финале ты создаешь pull request в master со своей релизной веткой и этот pull прикрепляешь как решение в classroom
- почему pull? - дело в том, что мне так проще проверять и проще писать тебе комментарии к задаче
- если у тебя все будет правильно, то ты получишь апрув на свой пулл.

Главное задание:
Ты наверное помнишь нашу игру в кости, если не помнишь, то очень жаль. Прийдется посмотреть и разобраться...

И так, нам нужно ее улучшить:
1) Давай введем в игру еще одну игральную кость, пусть их будет 2, одна ведь слишком просто.
2) Теперь изменим правило, по которому у нас переходит ход к следующему игроку - 
    ход переходит когда у нас хоть на одной из костей выпало 2 или на обеих дубль (это когда две одинаковые)
3) Сейчас добавим возможность ввести лимит до которого будет идти игра, помнишь? 
    Раньше было до 100, а теперь можешь добавить поле для ввода цифры. Если не вводишь значение, значит по умолчанию будет 100. 
    Если удалить значение, то там будет placeholder - придумай самостоятельно, что там будет написано, в этом я тебя не ограничиваю.
    Куда ты добавишь это поле не важно, желательно где-нибудь внизу, чтобы не мешало и не отвлекало на себя внимание.
4) А давай еще добавим возможность ввести данные пользователя, только через системный диалог - у нас их 3 (prompt, confirm and alert)
    два из них не подходят. Вместо player1, player2 теперь выводим ися. Данные пользователя нам нужны, чтобы научится использовать inheritance, с прошлого урока. 
    У тебя должно быть минимум два instance(экземпляра или объекта, называй как угодно) -  player1, player2 and playerN, почему N - узнаешь дальше.
    Каждый player отнаследован от одного, базового объекта - gamer, у которого должны быть функции getScore, setScore, resetScore(помни о DRY),
    их можно вызывать у объектов player1 and player2, зачем и как? - затем, что они player будет хранить только данные, функции будут у родителя,
    но у каждого игрока их можно вызвать.
5) Каждый игрок будет хранить у себя данные о том, сколько раз он победил. Для того, чтобы узнать это добавь кнопку для вывода данных о победителях,
    выводи данные в произвольной форме, хоть через системный диалог, вверху будет игрок с наибольшим кол-вом побед. 
    Тебе нужно сделать возможность сохранять данные о всех победителях(проигравшие меня не интересуют), которые играли в игру, даже если я перегружу страницу,
    сохранять их можно в localStorage(подсказка). И по нажатию на кнопку показать данные о победителях, которую добавили ранее - выводить их. 
    Если я перезагрузил страницу, то нужно давать возможность вводить данные о пользователе(пункт 4 усложним), если пользователь существует, 
    через системное окно нужно спросить точно ли он, если да, то все его победы дописываем в localStorage, если нет, то используй symbol, чтобы создать нового.

Как нужно делать работу? - я понимаю, что ты знаешь больше чем я рассказываю, но для того, чтобы я понимал, усвоился ли тобой материал - мне нужно,
чтобы домашние задания делались с использованием того, что я тебе рассказывал, для меня это очень важно!!! я не настаиваю, просто прошу.
    
    
Для тех, кто не любит поисковые системы я прикрепил пару ссылок, где почитать.
Если сложно с событими, почитай - https://learn.javascript.ru/events-and-interfaces and https://learn.javascript.ru/event-details
По прототипам тоже можно почитать - https://learn.javascript.ru/prototypes
localStorage - https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage


Ах да, за это домашнее задание ты можешь получить 7 баллов, 2 за гит и 5 за каждую минитаску

*/